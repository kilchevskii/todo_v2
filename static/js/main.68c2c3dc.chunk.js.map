{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","className","onSubmit","preventDefault","id","Math","floor","random","text","edit","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAgEeA,MA9Df,SAAkBC,GACd,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOC,QAetB,OACC,sBAAMC,UAAU,YAAYC,SAbR,SAAAJ,GACjBA,EAAEK,iBAEFf,EAAMc,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMlB,IAGVC,EAAS,KAKZ,SACKH,EAAMqB,KAEP,qCACA,uBACAC,KAAK,OACLC,YAAY,mBACZX,MAAOV,EACPsB,KAAK,OACLX,UAAU,kBACVY,SAAUhB,EACViB,IAAKtB,IAKL,wBAAQS,UAAU,mBAAlB,uBAGK,qCACC,uBACHS,KAAK,OACLC,YAAY,aACZX,MAAOV,EACPsB,KAAK,OACLX,UAAU,aACVY,SAAUhB,EACViB,IAAKtB,IAEL,wBAAQS,UAAU,cAAlB,4B,eCnBGc,MAjCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC5C,EAAwB9B,mBAAS,CAC7Be,GAAI,KACJJ,MAAO,KAFX,mBAAOS,EAAP,KAAaW,EAAb,KAYA,OAAGX,EAAKL,GACG,cAAC,EAAD,CAAUK,KAAMA,EAAMP,SARZ,SAAAF,GACjBmB,EAAWV,EAAKL,GAAIJ,GACpBoB,EAAQ,CACJhB,GAAI,KACJJ,MAAO,QAQRgB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKtB,UAAWqB,EAAKE,WAAa,oBAAsB,WAAxD,UACI,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKlB,KAApD,SAA0DkB,EAAKd,MAArDc,EAAKlB,IACf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACAwB,QAAS,kBAAMP,EAAWI,EAAKlB,KAC/BH,UAAU,gBAEV,cAAC,IAAD,CAAQwB,QAAS,kBAAML,EAAQ,CAAChB,GAAIkB,EAAKlB,GAAIJ,MAAOsB,EAAKd,QACzDP,UAAU,qBARuDsB,OC+BlEG,MAnDf,WACI,MAAyBrC,mBAAS,IAAlC,mBAAM2B,EAAN,KAAaW,EAAb,KAyCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUzB,SA1CF,SAAAoB,GACZ,GAAIA,EAAKd,OAAQ,QAAQoB,KAAKN,EAAKd,MAAnC,CAGA,IAAMqB,EAAQ,CAAIP,GAAJ,mBAAaN,IAK3BW,EAASE,OAkCL,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAfP,SAAAb,GACjB,IAAI0B,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKlB,KAAOA,IACXkB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAQ2CZ,WAvBrC,SAAAd,GACf,IAAM2B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKlB,KAAOA,KAExDuB,EAASI,IAoBmEZ,WA/B7D,SAACc,EAAQC,GACpBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAG3CmB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKhC,GAAK6B,EAASC,EAAWE,eCX1DC,MARf,WACE,OACE,qBAAKpC,UAAU,WAAf,SACE,cAAC,EAAD,OCFNqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.68c2c3dc.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState('');\r\n    // создали state чтобы отслеживать состояние нашего инпута\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000), \r\n            text: input\r\n        });\r\n\r\n        setInput('')\r\n    }\r\n\r\n\r\n    return (\r\n     <form className='todo-form' onSubmit={handleSubmit}>\r\n         {props.edit ? \r\n         ( \r\n         <>\r\n         <input \r\n         type='text' \r\n         placeholder='Update your item' \r\n         value={input} \r\n         name='text' \r\n         className='todo-input edit' \r\n         onChange={handleChange} \r\n         ref={inputRef}\r\n         // форма, в которой есть тип, пхолдер, value которое хранится в state, класс созданный для хранения\r\n         // предыдущего значения, в onChange лежит функция, которая позволяет нам обновлять состояние нашего state\r\n         // inputRef, который позволит сохранить фокус на инпуте после ререндера, первый раз накладывается с загрузкой страницы благодаря useEffect\r\n         />\r\n         <button className='todo-button edit'>Update</button>\r\n         </>\r\n         ) : (\r\n              <>\r\n               <input \r\n            type='text' \r\n            placeholder='Add a todo' \r\n            value={input} \r\n            name='text' \r\n            className='todo-input' \r\n            onChange={handleChange} \r\n            ref={inputRef}\r\n            />\r\n            <button className='todo-button'>Add todo</button>\r\n            </>\r\n            )}\r\n     </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n    if(edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>{todo.text}</div>\r\n            <div className='icons'>\r\n                <RiCloseCircleLine \r\n                onClick={() => removeTodo(todo.id)}\r\n                className='delete-icon'\r\n                />\r\n                <TiEdit onClick={() => setEdit({id: todo.id, value: todo.text})}\r\n                className='delete-icon'/>\r\n            </div>\r\n        </div>    \r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nfunction TodoList() {\r\n    const[todos, setTodos] = useState([])\r\n    // здесь хранится массив наших тудушек\r\n    const addTodo = todo => {\r\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return\r\n        }\r\n        const newTodos = [todo, ...todos]\r\n        // проверка не дает вводить пустой массив, и вырезает пробелы из строки\r\n        // если строка валидная, то newTodos берет новую тудушку, и добавляет ее первым элементом в массив\r\n        // а с помощью спред ...todos, позволяет хранить старые туду, уже после нового туду элемента \r\n        // которые мы благополучно загоняет в стейт\r\n        setTodos(newTodos)\r\n    }\r\n    \r\n    const updateTodo = (todoId, newValue) => {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id = todoId ? newValue : item)))\r\n    }\r\n        //  если новый тект не валиден, мы его не сможем добавить\r\n        //  если же проверка успешна, он позволяет нам перезаписать value по старому id ?????\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n\r\n        setTodos(removeArr) \r\n    }\r\n        // удаляет выбранную тудушку, и оставляет те, чьих id не совпал с выбранной\r\n\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if(todo.id === id) {\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        })\r\n        setTodos(updatedTodos)\r\n        // тут не понял, он берет массив todo, и если id todo совпадает с ее же id, меняет состояние свойства с true на false\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the Plan for Today?</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport React from 'react'\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}